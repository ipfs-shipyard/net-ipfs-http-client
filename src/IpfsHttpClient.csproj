<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0</TargetFrameworks>
    <AssemblyName>IpfsShipyard.Ipfs.Http.Client</AssemblyName>
    <RootNamespace>Ipfs.Http</RootNamespace>
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
    <DebugType>full</DebugType>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

    <!-- https://semver.org/spec/v2.0.0.html -->
    <Version>0.5.0</Version>
    <AssemblyVersion>$(Version)</AssemblyVersion>
    <LangVersion>12.0</LangVersion>

    <!-- Nuget specs -->
    <PackageId>IpfsShipyard.Ipfs.Http.Client</PackageId>
    <Authors>IPFS Shipyard, Arlo Godfrey, Richard Schneider</Authors>
    <Title>IPFS HTTP Client</Title>
    <Description>
    Backed by the IPFS Shipyard and developer community. Picking up where Richard Schneider left off.
    
    An easy to use .NET library for the IPFS HTTP Gateway API, and the Kubo RPC API v0.</Description>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReleaseNotes> </PackageReleaseNotes>
    <PackageTags>ipfs peer-to-peer distributed file-system</PackageTags>
    <IncludeSymbols>True</IncludeSymbols>
    <PackageProjectUrl>https://github.com/ipfs-shipyard/net-ipfs-http-client</PackageProjectUrl>
    <PackageIcon>icon.png</PackageIcon>
  </PropertyGroup>

  <PropertyGroup>
    <GeneratePackageOnBuild Condition=" '$(Configuration)' == 'Release' ">true</GeneratePackageOnBuild>

    <!-- Optional: Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <!-- Optional: Embed source files that are not tracked by the source control manager in the PDB -->
    <EmbedUntrackedSources>false</EmbedUntrackedSources>
    <!-- Optional: Build symbol package (.snupkg) to distribute the PDB containing Source Link -->
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.pdb;$(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
    <PackageReleaseNotes>
--- 0.5.0 ---
[Breaking]
Inherited breaking changes from IpfsShipyard.Ipfs.Core 0.6.0. See release notes for details.

[New]
Implemented MfsApi.ReadFileStreamAsync.

--- 0.4.0 ---
[Breaking]
No breaking changes for code in this library.
Inherited breaking changes from IpfsShipyard.Ipfs.Core 0.5.0. See release notes for details.

--- 0.3.0 ---
[Breaking]
No breaking changes for code in this library.
Inherited breaking changes from IpfsShipyard.Ipfs.Core 0.4.0. See release notes for details.

[Improvements]
Updated all package dependencies to latest version.

--- 0.2.0 ---
[Breaking]
Inherited breaking changes from IpfsShipyard.Ipfs.Core 0.2.0 and 0.3.0.
IDataBlock.DataStream was removed. This pattern encouraged async calls behind synchronous property getters, which is a bad practice and can cause deadlocks. Call the async methods directly on the API instead.
The obsolete IFileSystemApi.ListFileAsync was removed due to prior deprecation and removal in Kubo 0.26.0. Use IFileSystemApi.ListAsync and MfsApi.StatAsync instead. See https://github.com/ipfs/kubo/issues/7493#issuecomment-2016563729.

[New]
Added missing IFileSystemApi.ListAsync. Doesn't fully replace the removed IFileSystemApi.ListFileAsync, but is a step in the right direction. See https://github.com/ipfs/kubo/issues/7493#issuecomment-2016563729.
    </PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="icon.png" Pack="true" PackagePath="\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="IpfsShipyard.Ipfs.Core" Version="0.6.1" />
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
    <PackageReference Include="Multiformats.Base" Version="2.0.2" />
    <PackageReference Include="PolySharp" Version="1.14.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

</Project>
